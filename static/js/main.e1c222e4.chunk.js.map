{"version":3,"sources":["components/Card.js","components/CardList.js","components/Searchbox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","Actions.js","Constants.js","serviceWorker.js","Reducers.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","src","concat","alt","CardList","robots","map","user","i","components_Card","key","Searchbox","searchfield","searchChange","aria-label","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","App","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","components_Searchbox","components_Scroll","components_ErrorBoundary","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","err","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e1c222e4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card =({name, email, id}) =>{\r\n\treturn(\r\n\t\t<div className='bg-light-green tc dib br3 pa3 ma2 grow bw shadow-5'>\r\n\t\t\t<img src={`https://robohash.org/${id}?size=200x200`} alt=\"robots\"/>\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) =>{\r\n\t// if(true){\r\n\t// \tthrow new Error('NOOOOOOOO');\r\n\t// }\r\n\treturn(\r\n\t<div>\r\n\t\t{\r\n\t\t\trobots.map((user,i) =>{\r\n\t\t\t\treturn(\r\n\t\t\t\t\t<Card \r\n\t\t\t\t\t\tkey={robots[i].id} \r\n\t\t\t\t\t\tid={robots[i].id} \r\n\t\t\t\t\t\tname = {robots[i].name} \r\n\t\t\t\t\t\temail = {robots[i].email}\r\n\t\t\t\t\t/>\r\n\t\t\t\t);\r\n\t\t\t})\r\n\t\t}\r\n\t</div>\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst Searchbox = ({searchfield,searchChange}) =>{\r\n\treturn(\r\n\t\t<div className='pa2'>\r\n\t\t\t<input\r\n\t\t\t\taria-label='Search Robots'\r\n\t\t\t\tclassName=\"pa3 ba b--green bg-lightest-blue\"\r\n\t\t\t\ttype=\"search\"\r\n\t\t\t\tplaceholder=\"Search robots\"\r\n\t\t\t\tonChange={searchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Searchbox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn(\r\n\t\t<div style={{ overflowY : 'scroll', border: '1px solid black', height: '500px' }}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t)\r\n};\r\n\r\nexport default Scroll;\r\n\r\n","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error,info){\r\n        this.setState({hasError: true})\r\n    }\r\n\r\n    render(){\r\n        if(this.state.hasError){\r\n            return <h1>OOPS! that is not good</h1>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport Searchbox from '../components/Searchbox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport './App.css';\r\n\r\nimport {setSearchField, requestRobots} from '../Actions';\r\n\r\nconst mapStateToProps = state =>{\r\n\treturn {\r\n\t\tsearchField: state.searchRobots.searchField,\r\n\t\trobots: state.requestRobots.robots,\r\n\t\tisPending: state.requestRobots.isPending,\r\n\t\terror: state.requestRobots.error\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) =>{\r\n\treturn {\r\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n\t\tonRequestRobots: () => dispatch(requestRobots())\r\n\t}\r\n\r\n}\r\n\r\nclass App extends Component {\r\n\r\n\tcomponentDidMount(){\r\n\t\tthis.props.onRequestRobots();\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst {searchField, onSearchChange, robots, isPending} = this.props;\r\n\t\tconst filteredRobots = robots.filter(robot =>{\r\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n\t\t})\r\n\t\tif (isPending) {\r\n\t\t\treturn <h1 className='f1 tc'>Loading</h1>\r\n\t\t}else{\r\n\t\t\treturn(\r\n\t\t\t\t<div className='tc'>\r\n\t\t\t\t\t<h1 className='f1' >Robofriends</h1>\r\n\t\t\t\t\t<Searchbox searchChange={onSearchChange}/>\r\n\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t\t\t<CardList robots={filteredRobots}/>\t\r\n\t\t\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t\t</Scroll>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(App);\r\n","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './Constants.js';\r\n\r\nexport const setSearchField = (text) =>({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) =>{\r\n    dispatch({type: REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n    .catch(err => dispatch({type:REQUEST_ROBOTS_FAILED, payload:err}))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './Constants.js';\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) =>{\r\n    switch(action.type){\r\n        case CHANGE_SEARCH_FIELD :\r\n            return Object.assign({},state,{searchField:action.payload})\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) =>{\r\n    switch(action.type){\r\n        case REQUEST_ROBOTS_PENDING :\r\n            return Object.assign({},state,{ isPending:true})\r\n        case REQUEST_ROBOTS_SUCCESS :\r\n            return Object.assign({},state,{ robots:action.payload, isPending:false})\r\n        case REQUEST_ROBOTS_FAILED :\r\n            return Object.assign({},state,{ error:action.payload, isPending:false})\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider} from 'react-redux';\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './Reducers';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({searchRobots,requestRobots})\n\nconst store = createStore(rootReducer,applyMiddleware(thunkMiddleware,logger));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}